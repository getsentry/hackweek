isAllowedUser() { auth != null && auth.token.email_verified == true && auth.token.email.endsWith('@sentry.io') }

isAdmin() { prior(root.users[auth.uid].admin) == true }

isCurrentUser(uid) { auth != null && auth.uid == uid }

isUser(uid) { prior(root.users[uid]) != null }

hasSubmissions(year) { prior(root.years[year].submissionsClosed) != true }

canVote(year) { prior(root.years[year].votingEnabled) == true }

type UserRef extends String {
    validate() { isUser(this) }
}

type InitialTimestamp extends Number {
    validate() { (prior(this) == null && this != null) || prior(this) == this }
}

type InitialUserRef extends String {
    validate() { (prior(this) == null && isCurrentUser(this)) || prior(this) == this }
}

type User {
    admin: Boolean | Null,
    avatarUrl: String
    displayName: String,
    email: String,
    providerData: Object

    validate() { this.admin == prior(this.admin) || isAdmin() }
}

type ProjectMember {
    ts: InitialTimestamp,

    validate() { isUser(key()) }
}

type ProjectMedia {
    name: String,
    path: String,
    ts: InitialTimestamp,
}

type Project {
    creator: InitialUserRef,
    name: String,
    summary: String | Null,
    repository: String | Null,
    ts: InitialTimestamp,
    isIdea: Boolean | Null,
    needHelp: Boolean | Null,
    needHelpComments: String | Null,
    year: String,
    group: GroupRef | Null,
    videoUrl: String | Null,

    validate() {
        prior(this.members) == null || prior(this.members[auth.uid]) != null || isAdmin()
    }
}

type ProjectRef extends String {
    validate() { this.parent().parent().parent().projects[this] != null }
}

type Group {
    name: String,
    year: String,
    creator: InitialUserRef,
    ts: InitialTimestamp
}

type GroupRef extends String {
    validate() { this.parent().parent().parent().groups[this] != null }
}

type AwardCategoryRef extends String {
    validate() { this.parent().parent().parent().awardCategories[this] != null }
}

type Award {
    creator: InitialUserRef,
    project: ProjectRef,
    name: String,
    awardCategory: AwardCategoryRef,
    ts: InitialTimestamp,
}

type AwardCategory {
    creator: InitialUserRef,
    name: String,
    ts: InitialTimestamp
}

type Year {
    votingEnabled: Boolean | Null,
    submissionsClosed: Boolean | Null,
}

type Vote {
    creator: InitialUserRef,
    project: ProjectRef,
    awardCategory: AwardCategoryRef,
    ts: Number

    validate() { ($voteId == this.creator + ':' + this.awardCategory) && this.parent().parent().projects[this.project].members[auth.uid] == null }
}

path / {
    read() { isAllowedUser() }
}

path /users/{userId} is User {
    write() { isAllowedUser() && isCurrentUser(userId) }
}

path /years/{year} is Year {
    path /awardCategories/{awardCategoryId} is AwardCategory {
        write() { isAdmin() }
        index() { ["creator"] }
    }

    path /awards/{awardId} is Award {
        write() { isAdmin() }
        index() { ["creator", "project"] }
    }

    path /projects/{projectId} is Project {
        write() { isAllowedUser() && hasSubmissions(year) }
        index() { ["creator"] }

        path /media/{mediaId} is ProjectMedia {}

        path /members/{memberId} is ProjectMember {}
    }

    path /votes/{voteId} is Vote {
        write() { isAllowedUser() && canVote(year) }
        index() { ["creator", "awardCategory"]}
    }

    path /groups {
      read() { isAllowedUser() }
      write() { isAdmin() }
      index() { ["name"] }
    }

    path /groups/{groupid} is Group {
      read() { isAllowedUser() }
      write() { isAdmin() }
      index() { ["name"] }
    }

    write() { isAdmin() }
}
